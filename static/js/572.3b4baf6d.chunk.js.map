{"version":3,"file":"static/js/572.3b4baf6d.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"textbox\":\"ContactForm_textbox__5Fl6s\",\"button\":\"ContactForm_button__eSwX9\"};","import s from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewContact } from 'redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChangeForm = evt => {\n    const { value, name } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmitForm = evt => {\n    evt.preventDefault();\n\n    const dataForm = {\n      name,\n      number,\n    };\n\n    contacts.find(\n      ({ name }) => name.toLowerCase() === dataForm.name.toLowerCase()\n    )\n      ? alert(`${dataForm.name} is already in contacts.`)\n      : dispatch(addNewContact(dataForm));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleOnSubmitForm} className={s.form}>\n      <div>\n        <label>\n          <p>Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChangeForm}\n            className={s.textbox}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          <p>Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChangeForm}\n            className={s.textbox}\n          />\n        </label>\n      </div>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// export class ContactForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChangeForm = evt => {\n//     const { value, name } = evt.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleOnSubmitForm = evt => {\n//     evt.preventDefault();\n//     const { name, number } = this.state;\n//     const dataForm = {\n//       name,\n//       number,\n//       id: nanoid(),\n//     };\n//     this.props.onSubmit(dataForm);\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleOnSubmitForm} className={s.form}>\n//         <div>\n//           <label>\n//             <p>Name</p>\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//               value={name}\n//               onChange={this.handleChangeForm}\n//               className={s.textbox}\n//             />\n//           </label>\n//         </div>\n//         <div>\n//           <label>\n//             <p>Number</p>\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//               value={number}\n//               onChange={this.handleChangeForm}\n//               className={s.textbox}\n//             />\n//           </label>\n//         </div>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\",\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\"};","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/contactsOperations';\nimport s from './ContactList.module.css';\n\nexport const ContactList = ({ contactsList }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    contactsList.length !== 0 && (\n      <ul className={s.list}>\n        {contactsList.map(({ name, number, id }) => (\n          <li key={id} className={s.item}>\n            {name}: {number}\n            <button\n              type=\"button\"\n              onClick={() => {\n                handleDelete(id);\n              }}\n              className={s.button}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\n\nContactList.propTypes = {\n  contactsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__wVnxJ\",\"textbox\":\"Filter_textbox__+flfu\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nexport const Filter = ({ value, onChange }) => {\n  return (\n    <div className={s.form}>\n      <label>\n        <p>Find contacts by name</p>\n        <input\n          type=\"text\"\n          value={value}\n          name=\"filter\"\n          onChange={onChange}\n          className={s.textbox}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","// import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux/es/exports';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\n// import { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport { UserMenu } from 'components/UserMenu/UserMenu';\n// import { useEffect } from 'react';\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const statePhonebook = useSelector(state => state.contacts.items);\n  console.log('~ statePhonebook', statePhonebook);\n  console.log('~ contacts', contacts);\n  const symbolsFilter = useSelector(state => state.contacts.filter);\n\n  // useEffect(() => {\n  //   dispatch(fetchContacts());\n  // }, [dispatch]);\n\n  const handleOnInputFilter = evt => {\n    const { value } = evt.target;\n    dispatch(contactsActions.findContact(value));\n  };\n\n  const normFilter = symbolsFilter.toLowerCase();\n  const filteredContacts = normFilter\n    ? contacts.filter(item => item.name.toLowerCase().includes(normFilter))\n    : null;\n  return (\n    <div>\n      <UserMenu />\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter value={symbolsFilter} onChange={handleOnInputFilter} />\n      <ContactList contactsList={filteredContacts || contacts} />\n    </div>\n  );\n};\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","useState","name","setName","number","setNumber","handleChangeForm","evt","target","value","onSubmit","preventDefault","dataForm","find","toLowerCase","alert","addNewContact","className","s","type","pattern","title","required","onChange","ContactList","contactsList","useEffect","fetchContacts","length","map","id","onClick","deleteContact","handleDelete","Filter","Phonebook","statePhonebook","console","log","symbolsFilter","filter","normFilter","filteredContacts","item","includes","UserMenu","contactsActions"],"sourceRoot":""}